<pre class='metadata'>
Title: The Origin API
Shortname: origin-api
Level: None
Status: w3c/UD
Repository: mikewest/origin-api
URL: https://mikewest.github.io/origin-api
Editor: Mike West, Google https://google.com, mkwst@google.com
Abstract: An `Origin` object might be nice to have.
Markup Shorthands: markdown yes, css no
Complain About: accidental-2119 yes, missing-example-ids yes
Assume Explicit For: yes
Die On: warning
</pre>

Introduction {#intro}
============

The [=/origin=] is a fundamental component of the web's implementation, essential to both the security and privacy boundaries which user agents maintain. The concept is well-defined between HTML and URL, along with widely-used adjacent concepts like "[=/site=]".

Origins, however, are not directly exposed to web developers. Though there are various `origin` getters on various objects, each of those returns the [=ASCII serialization of an origin=], not the origin itself. This has a few negative implications. Practically, developers attempting to do same-origin or same-site comparisons when handling serialized origins often get things wrong in ways that lead to vulnerabilities (see [PMForce: Systematically Analyzing postMessage Handlers at Scale](https://swag.cispa.saarland/papers/steffens2020pmforce.pdf) (Steffens and Stock, 2020) as one illuminating study). Philosophically, it seems like a missing security primitive that developers struggle to polyfill accurately.

We can address this gap in the platform by introducing an `Origin` object that encapsulates the origin concept, and provides helpful methods for comparison, serialization, parsing, and etc.

The `Origin` Object {#api}
===================

ISSUE(whatwg/html#11534): This section is probably best read as a patch to HTML, adding a new subsection to [7.1.1 Origins](https://html.spec.whatwg.org/multipage/browsers.html#origin). If there's support for the idea, we should turn it into a PR rather than a standalone document.

<pre class="idl">
[Exposed=*]
interface Origin {
  constructor();

  static Origin? from(any value);

  readonly attribute boolean opaque;

  boolean isSameOrigin(Origin other);
  boolean isSameSite(Origin other);
};
</pre>

An {{Origin}} object has an <dfn for="Origin" attribute>`[[origin]]`</dfn> internal slot, which
holds an [=origin=].

<div algorithm="new Origin()">
The <dfn for="Origin" constructor lt="Origin()">`new Origin()`</dfn> constructor steps are:

1.  Set [=this=]'s {{Origin/[[origin]]}} to a unique [=/opaque origin=].

</div><!-- new Origin() -->


<div algorithm="from(value)">
The static <dfn for="Origin" method lt="from(value)">`from(value)`</dfn> accepts 
method accepts an arbitrary object |value|, and either returns a newly-constructed `Origin`
object if one can be extracted from |value|, or throws a `TypeError` otherwise:

1.  If |value| is a [=platform object=]:

    1.  Let |origin| be the result of executing |value|'s [$extract an origin$] algorithm.
    
    2.  If |origin| is not `null`, then return a new {{Origin}} object whose {{Origin/[[origin]]}}
        is set to |origin|.

2.  If |value| is a [=string=]:

    1.  Let |parsed url| be the result of running the [=basic URL parser=] on |value|.

    2.  If |parsed url| is not failure, then return a new {{Origin}} object whose
        {{Origin/[[origin]]}} is set to |parsed url|'s [=url/origin=].

    Note: Unlike {{URL/parse(url)|URL.parse}}, `Origin.from(String)` doesn't accept a base, but
    requires the serialization of an absolute URL. That seems clearer, and guides developers
    towards constructing a {{URL}} object in some well-understood way that's distinct from their
    work with {{Origin}}.
    
3.  Throw a {{TypeError}}.

    Note: We fall through to throwing a `TypeError` here if we fail to extract an origin from a
    given platform object or string.

</div><!-- from(value) -->


The <dfn for="Origin" attribute>`opaque`</dfn> attribute getter steps are to return `true`
if [=this=]'s {{Origin/[[origin]]}} is an [=opaque origin=], and `false` otherwise.

The <dfn for="Origin" method>`isSameOrigin(other)`</dfn> method steps are to return `true`
if [=this=]'s {{Origin/[[origin]]}} is [=same origin=] with <var ignore>other</var>'s
{{Origin/[[origin]]}}, and `false` otherwise.

<div algorithm="isSameSite(other)">
The <dfn for="Origin" method>`isSameSite(other)`</dfn> method steps are to return `true`
if [=this=]'s {{Origin/[[origin]]}} is [=same site=] with <var ignore>other</var>'s
{{Origin/[[origin]]}}, and `false` otherwise.

Note: This is a [=same site=], not [=schemelessly same site=], comparison.
</div><!-- isSameSite(other) -->


Origin Extraction {#extraction}
-----------------

[=Platform objects=] have an <dfn abstract-op>extract an origin</dfn> operation which returns
`null` unless otherwise specified.

ISSUE(whatwg/html#11534): The following implementations should be colocated with their
definitions in HTML and elsewhere.

### `URL` ### {#extraction-URL}

<div algorithm="extract an origin URL">
An object implementing the {{URL}} interface's [$extract an origin$] operation
runs the following steps:

1.  Return [=this=]'s [=url/origin=].

</div><!-- URL -->

### `Origin` ### {#extraction-Origin}

<div algorithm="extract an origin Origin">
An object implementing the {{Origin}} interface's [$extract an origin$] operation
runs the following steps:

1.  Return [=this=]'s {{Origin/[[origin]]}}.

</div><!-- Origin -->


### `ExtendableMessageEvent` ### {#extraction-ExtendableMessageEvent}

<div algorithm="extract an origin ExtendableMessageEvent">
An object implementing the {{ExtendableMessageEvent}} interface's [$extract an origin$] operation
runs the following steps:

1.  Return [=this=]'s {{ExtendableMessageEvent/origin}}.

    ISSUE: This doesn't actually work, as `ExtendableMessageEvent` holds a serialized origin,
    not an origin. We'll need to adjust step 6.2.2 of {{ServiceWorker}}'s
    {{ServiceWorker/postMessage(message, options)}} accordingly.

</div><!-- ExtendableMessageEvent -->

### `HTMLHyperlinkElementUtils` ### {#extraction-HTMLHyperlinkElementUtils}

<div algorithm="extract an origin HTMLHyperlinkElementUtils">
An object implementing the {{HTMLHyperlinkElementUtils}} mixin's [$extract an origin$] operation
runs the following steps:

1.  If [=this=]'s `url` is `null`, return `null`.

2.  Return [=this=]'s `url`'s [=url/origin=].

</div><!-- HTMLHyperlinkElementUtils -->


### `Location` ### {#extraction-Location}

<div algorithm="extract an origin Location">
An object implementing the {{Location}} interface's [$extract an origin$] operation runs the
following steps:

1.  If [=this=]'s <a dfn spec=HTML>relevant `Document`</a> is non-`null`, and its
    [=Document/origin=] is not [=same origin-domain=] with the
    <a dfn spec=HTML>entry settings object</a>'s [=environment settings object/origin=], then
    return `null`.

2.  Return [=this=]'s `url`'s [=url/origin=].

Note: As `Location` is potentially accessible cross-origin, we need to maintain its getters'
security checks here.

</div><!-- Location -->


### `WindowOrWorkerGlobalScope` ### {#extraction-WindowOrWorkerGlobalScope}

<div algorithm="extract an origin WindowOrWorkerGlobalScope">
An object implementing the {{WindowOrWorkerGlobalScope}} mixin's [$extract an origin$] operation
runs the following steps:

1.   If [=this=]'s [=relevant settings object=]'s [=environment settings object/origin=] is not
     [=same origin-domain=] with the <a dfn spec=HTML>entry settings object</a>'s
     [=environment settings object/origin=], then return `null`.

2.   Return [=this=]'s [=relevant settings object=]'s [=environment settings object/origin=].

Note: As `WindowProxy` objects are potentially accessible cross-origin, we need to perform a
security check here before granting access to the global scope's `origin`.

</div><!-- WindowOrWorkerGlobalScope -->


### `WorkerLocation` ### {#extraction-WorkerLocation}

<div algorithm="extract an origin WorkerLocation">
An object implementing the {{WorkerLocation}} interface's [$extract an origin$] operation
runs the following steps:

1.  Return [=this=]'s `WorkerGlobalScope`'s `url`'s `origin`.

</div><!-- WorkerLocation -->


### `MessageEvent` ### {#extraction-MessageEvent}

<div algorithm="extract an origin MessageEvent">
An object implementing the {{MessageEvent}} interface's [$extract an origin$] operation
runs the following steps:

1.  Return [=this=]'s [=relevant settings object=]'s [=environment settings object/origin=].

</div><!-- MessageEvent -->


Security Considerations {#security}
=======================

The {{Origin/isSameSite(other)}} method exposes each particular user agent's understanding of an
[=origin=]'s [=site=]. As this understanding generally depends on a specific snapshot of
the Public Suffix List [[PSL]], the deliniation of a [=site=] can and does differ between user
agents, and even between versions of one user agent. Developers are encouraged to exercise caution
when making decisions based on [=sites=], and are likewise encouraged to rely upon
{{Origin/isSameOrigin(other)}} when making security decisions.


Privacy Considerations {#privacy}
======================

The Public Suffix List [[PSL]] changes over time, and will likely be different from browser to
browser and from one version of one browser to another. While the list is likely strongly
correllated to a specific version of a user agent, exposing the list via {{Origin/isSameSite()}}
could leak some information in cases where the user agent desires to limit its brand's or
version's visibility.
